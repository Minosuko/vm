<?php
class cache_controller{
	function __construct($index){
		if(empty($index) && !is_numeric($index)) throw new Exception("Empty index.");
		$path = $GLOBALS["vm"]["config"]["path"]["cache_$index"];
		$this->path = $path;
		$this->MAX_SIZE = $GLOBALS["vm"]["config"]["RAM"]["cache_$index"];
		$this->UAD_SIZE = 64;
		$pl = strtolower($path);
		if((substr($pl,0,11) == "php://temp/") or ($pl == 'php://memory')){
			if(strlen($path) == 11)
				$path = $path."memory";
		}else{
			file_put_contents($path,'');
		}
		$this->open_memory = fopen($path, 'rw+');
		$this->create($path);
	}
	function RFI_decode($input){
		$result = [];
		$size = ord($input[0]);
		$offset = 1;
		for($i = 0; $i < $size; $i++){
			$varCount = ord($input[$offset]);
			$varSize = [];
			$varData = [];
			$off = 0;
			for($x = 0; $x < $varCount; $x++)
				$varSize[] = ord($input[$offset + $x + 1]);
			for($d = 0; $d < $varCount; $d++){
				if($d != 0)
					$off += $varSize[$d - 1];
				$varData[] = substr($input, ($offset+1+$varCount+$off), $varSize[$d]);
			}
			$offset += 1 + $varCount;
			for($o = 0; $o < $varCount; $o++)
				$offset += $varSize[$o];
			$result[] = $varData;
		}
		return $result;
	}

	function RFI_encode($input) {
		$result = chr(count($input));
		foreach($input as $data){
			$VarCount = chr(count($data));
			$VarSize = '';
			$VarData = '';
			foreach($data as $var){
				$VarSize .= chr(strlen($var));
				$VarData .= $var;
			}
			$result .= $VarCount.$VarSize.$VarData;
		}
		return $result;
	}
	function close(){
		fclose($this->open_memory);
	}
	function _open_mem(){
		return $this->open_memory;
	}
	function check_file(){
		rewind($this->open_memory);
		$open = $this->open_memory;
		$vdk_size = unpack('i', fread($open,4));
		$rfi_size = unpack('i', fread($open,4));
		$ald_size = unpack('i', fread($open,4));
		$fsp_size = unpack('i', fread($open,4));
		$uad_size = unpack('i', fread($open,4));
		
		if
		(
			isset($vdk_size[1]) &&
			isset($rfi_size[1]) &&
			isset($ald_size[1]) &&
			isset($fsp_size[1]) &&
			isset($uad_size[1])
		)
			return true;

		return false;
	}
	
	function create($size = '', $uad_size = ''){
		if(empty($size) or !is_numeric($size)){
			$fsp_max_size = $this->MAX_SIZE;
		}
		if(empty($uad_size) or !is_numeric($uad_size)){
			$uad_max_size = $this->UAD_SIZE;
		}
		$data = '';
		
		$jdata = $this->RFI_encode([]);
		
		$vdk_size = pack('i', $fsp_max_size);
		$rfi_size = pack('i', strlen($jdata));
		$ald_size = pack('i', 0);
		$fsp_size = pack('i', ($fsp_max_size - (20 + $uad_max_size)));
		$uad_size = pack('i', $uad_max_size);
		
		$data .= $vdk_size;
		$data .= $rfi_size;
		$data .= $ald_size;
		$data .= $fsp_size;
		$data .= $uad_size;
		
		
		$data .= $jdata;
		$data .= str_repeat(chr(0), $uad_max_size); // 512 b un-allocate
		
		$open = $this->open_memory;
		fseek($open, 0);
		fwrite($open, $data);
		
		return true;
	}
	
	function readinfo(){
		rewind($this->open_memory);
		$open = $this->open_memory;
		$vdk_size = unpack('i', fread($open,4))[1];
		$rfi_size = unpack('i', fread($open,4))[1];
		$ald_size = unpack('i', fread($open,4))[1];
		$fsp_size = unpack('i', fread($open,4))[1];
		$uad_size = unpack('i', fread($open,4))[1];
		$raw_json_data = fread($open, $rfi_size);
		$raw_uad_data = fread($open, $uad_size);
		if($ald_size > 0)
			$allocated_data = fread($open, $ald_size);
		else
			$allocated_data = '';
		
		$ouh_data = md5(str_repeat(chr(0), $uad_size));
		$uad_md5_hash = md5($raw_uad_data);
		$ald_md5_hash = md5($allocated_data);
		$rfi_md5_hash = md5($raw_json_data);
		$vdk_hash = md5(0);//md5_file($path);
		if($ouh_data == $uad_md5_hash)
			$uad_writeable = 1;
		else
			$uad_writeable = 0;
		return [
			"VDK_HASH"      => $vdk_hash,
			"VDK_SIZE"      => $vdk_size,
			"RFI_SIZE"      => $rfi_size,
			"ALD_SIZE"      => $ald_size,
			"FSP_SIZE"      => $fsp_size,
			"UAD_SIZE"      => $uad_size,
			"RFI_MD5_HASH"  => $rfi_md5_hash,
			"ALD_MD5_HASH"  => $ald_md5_hash,
			"UAD_MD5_HASH"  => $uad_md5_hash,
			"OUH_DATA"      => $ouh_data,
			"UAD_WRITEABLE" => $uad_writeable
		];
	}
	
	function create_file($filename, $fdata){
		if($this->read_file_info($filename)) $this->delete_file($filename);
		rewind($this->open_memory);
		$open = $this->open_memory;
		$vdk_size = unpack('i', fread($open,4))[1];
		$rfi_size = unpack('i', fread($open,4))[1];
		$ald_size = unpack('i', fread($open,4))[1];
		$fsp_size = unpack('i', fread($open,4))[1];
		$uad_size = unpack('i', fread($open,4))[1];
		
		if(strlen($fdata) > ($fsp_size - $rfi_size - $uad_size - 20)){
			
			return false;
		}
		
		$raw_json_data = fread($open, $rfi_size);
		$raw_uad_data = fread($open, $uad_size);
		if($ald_size > 0)
			$allocated_data = fread($open, $ald_size);
		else
			$allocated_data = '';
		
		
		
		$json_data = @$this->RFI_decode($raw_json_data, true);
		if(isset($json_data)){
			$json_data[] = [$filename, $ald_size, strlen($fdata)];
			
			$data = '';
			$n_raw_json_data = $this->RFI_encode($json_data);
			$open = $this->open_memory;
			fseek($open, 0);
			
			$n_vdk_size = pack('i', $vdk_size);
			$n_rfi_size = pack('i', strlen($n_raw_json_data));
			$n_ald_size = pack('i', ($ald_size + strlen($fdata)));
			$n_fsp_size = pack('i', ($fsp_size - strlen($fdata)));
			$n_uad_size = pack('i', $uad_size);
			
			$data .= $n_vdk_size;
			$data .= $n_rfi_size;
			$data .= $n_ald_size;
			$data .= $n_fsp_size;
			$data .= $n_uad_size;
			
			
			$data .= $n_raw_json_data;
			$data .= $raw_uad_data;
			
			$data .= $allocated_data . $fdata;
			
			fwrite($open, $data);
			
			return true;
		}else{
			return false;
		}
	}
	
	function delete_file($filename){
		rewind($this->open_memory);
		$open = $this->open_memory;
		$vdk_size = unpack('i', fread($open,4))[1];
		$rfi_size = unpack('i', fread($open,4))[1];
		$ald_size = unpack('i', fread($open,4))[1];
		$fsp_size = unpack('i', fread($open,4))[1];
		$uad_size = unpack('i', fread($open,4))[1];
		
		$raw_json_data = fread($open, $rfi_size);
		$raw_uad_data = fread($open, $uad_size);
		
		
		$json_data = @$this->RFI_decode($raw_json_data, true);
		if(isset($json_data)){
			$n_json_data = [];
			$n = 0;
			$allocated_data_2 = '';
			foreach($json_data as $find){
				if($find[0] == $filename){
					$n = $find[2];
				}else{
					fseek($open, (20+$find[1]+$rfi_size+$uad_size));
					$allocated_data_2 .= fread($open, $find[2]);
					$n_json_data[] = [$find[0],($find[1]-$n),$find[2]];
				}
			}
			
			$data = '';
			$n_raw_json_data = $this->RFI_encode($n_json_data);
			$open = $this->open_memory;
			fseek($open, 0);
			
			$n_vdk_size = pack('i', $vdk_size);
			$n_rfi_size = pack('i', strlen($n_raw_json_data));
			$n_ald_size = pack('i', ($ald_size - $n));
			$n_fsp_size = pack('i', ($fsp_size + $n));
			$n_uad_size = pack('i', $uad_size);
			
			$data .= $n_vdk_size;
			$data .= $n_rfi_size;
			$data .= $n_ald_size;
			$data .= $n_fsp_size;
			$data .= $n_uad_size;
			
			
			$data .= $n_raw_json_data;
			$data .= $raw_uad_data;
			
			$data .= $allocated_data_2;
			
			fwrite($open, $data);
			
			return true;
		}else{
			return false;
		}
	}
	
	function write_uad_data($fdata){
		rewind($this->open_memory);
		$open = $this->open_memory;
		$vdk_size = unpack('i', fread($open,4))[1];
		$rfi_size = unpack('i', fread($open,4))[1];
		$ald_size = unpack('i', fread($open,4))[1];
		$fsp_size = unpack('i', fread($open,4))[1];
		$uad_size = unpack('i', fread($open,4))[1];
		
		if(strlen($fdata) > $uad_size){
			
			return false;
		}
		
		$raw_json_data = fread($open, $rfi_size);
		$raw_uad_data = fread($open, $uad_size);
		if(md5($raw_uad_data) != md5(str_repeat(chr(0), $uad_size))){
			
			return false;
		}
		if($ald_size > 0)
			$allocated_data = fread($open, $ald_size);
		else
			$allocated_data = '';
		
		
		$json_data = @$this->RFI_decode($raw_json_data, true);
		if(isset($json_data)){
			$data = '';
			$uad_data = $fdata;
			if(strlen($fdata) < $uad_size){
				$uad_data .= str_repeat(chr(0), ($uad_size - strlen($fdata)));
			}
			
			$n_raw_json_data = $this->RFI_encode($json_data);
			$open = $this->open_memory;
			fseek($open, 0);
			
			$n_vdk_size = pack('i', $vdk_size);
			$n_rfi_size = pack('i', strlen($n_raw_json_data));
			$n_ald_size = pack('i', $ald_size);
			$n_fsp_size = pack('i', $fsp_size);
			$n_uad_size = pack('i', $uad_size);
			
			$data .= $n_vdk_size;
			$data .= $n_rfi_size;
			$data .= $n_ald_size;
			$data .= $n_fsp_size;
			$data .= $n_uad_size;
			
			
			$data .= $n_raw_json_data;
			$data .= $uad_data;
			
			$data .= $allocated_data;
			
			fwrite($open, $data);
			
			return true;
		}else{
			return false;
		}
	}
	function read_file($filename){
		rewind($this->open_memory);
		$open = $this->open_memory;
		fseek($open,4);
		$rfi_size = unpack('i', fread($open,4))[1];
		fseek($open,16);
		$uad_size = unpack('i', fread($open,4))[1];
		
		$raw_json_data = fread($open, $rfi_size);
		
		$json_data = @$this->RFI_decode($raw_json_data, true);
		if(isset($json_data)){
			$e = 0;
			foreach($json_data as $file_to_find){
				if($file_to_find[0] == $filename){
					$e = 1;
					$d = $file_to_find;
				}
			}
			if($e == 1){
				fseek($open, (20+$d[1]+$rfi_size+$uad_size));
				$data = fread($open, $d[2]);
			}else{
				$data = false;
			}
		}else{
			$data = false;
		}
		
		return $data;
	}
	function read_file_info($filename){
		rewind($this->open_memory);
		$open = $this->open_memory;
		fseek($open,4);
		$rfi_size = unpack('i', fread($open,4))[1];
		fseek($open,20);
		$raw_json_data = fread($open, $rfi_size);
		
		
		$json_data = @$this->RFI_decode($raw_json_data, true);
		if(isset($json_data))
			foreach($json_data as $file_to_find)
				if($file_to_find[0] == $filename)
					return ["filename" => $file_to_find[0],"data_offset" => $file_to_find[1], "filesize" => $file_to_find[2]];
		return false;
	}
	function read_uad_data(){
		rewind($this->open_memory);
		$open = $this->open_memory;
		fseek($open,4);
		$rfi_size = unpack('i', fread($open,4))[1];
		fseek($open, 16);
		$uad_size = unpack('i', fread($open,4))[1];
		fseek($open,(20+$rfi_size));
		$raw_uad_data = fread($open, $uad_size);
		return $raw_uad_data;
	}
}
?>
